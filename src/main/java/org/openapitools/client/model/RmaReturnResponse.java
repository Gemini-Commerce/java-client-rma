/*
 * RMA Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Contact: info@gemini-commerce.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RmaCustomerInfo;
import org.openapitools.client.model.RmaOrderData;
import org.openapitools.client.model.RmaPostalAddress;
import org.openapitools.client.model.RmaRefundMethod;
import org.openapitools.client.model.RmaReturnHistory;
import org.openapitools.client.model.RmaReturnProduct;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import GeminiCommerce.Rma.JSON;

/**
 * RmaReturnResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-15T15:24:42.338735973Z[Etc/UTC]", comments = "Generator version: 7.9.0")
public class RmaReturnResponse {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_GRN = "grn";
  @SerializedName(SERIALIZED_NAME_GRN)
  private String grn;

  public static final String SERIALIZED_NAME_ORDER_GRN = "orderGrn";
  @SerializedName(SERIALIZED_NAME_ORDER_GRN)
  private String orderGrn;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_PRODUCTS = "products";
  @SerializedName(SERIALIZED_NAME_PRODUCTS)
  private List<RmaReturnProduct> products = new ArrayList<>();

  public static final String SERIALIZED_NAME_PREFERRED_REFUND_METHOD = "preferredRefundMethod";
  @SerializedName(SERIALIZED_NAME_PREFERRED_REFUND_METHOD)
  private RmaRefundMethod preferredRefundMethod = RmaRefundMethod.UNKNOWN;

  public static final String SERIALIZED_NAME_REFUND_SHIPPING_COST = "refundShippingCost";
  @SerializedName(SERIALIZED_NAME_REFUND_SHIPPING_COST)
  private Boolean refundShippingCost;

  public static final String SERIALIZED_NAME_REFUND_PAYMENT_COST = "refundPaymentCost";
  @SerializedName(SERIALIZED_NAME_REFUND_PAYMENT_COST)
  private Boolean refundPaymentCost;

  public static final String SERIALIZED_NAME_CUSTOMER_INFO = "customerInfo";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_INFO)
  private RmaCustomerInfo customerInfo;

  public static final String SERIALIZED_NAME_RETURN_ADDRESS = "returnAddress";
  @SerializedName(SERIALIZED_NAME_RETURN_ADDRESS)
  private RmaPostalAddress returnAddress;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_HISTORY = "history";
  @SerializedName(SERIALIZED_NAME_HISTORY)
  private List<RmaReturnHistory> history = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_ORDER_DATA = "orderData";
  @SerializedName(SERIALIZED_NAME_ORDER_DATA)
  private RmaOrderData orderData;

  public RmaReturnResponse() {
  }

  public RmaReturnResponse id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public RmaReturnResponse grn(String grn) {
    this.grn = grn;
    return this;
  }

  /**
   * Get grn
   * @return grn
   */
  @javax.annotation.Nullable
  public String getGrn() {
    return grn;
  }

  public void setGrn(String grn) {
    this.grn = grn;
  }


  public RmaReturnResponse orderGrn(String orderGrn) {
    this.orderGrn = orderGrn;
    return this;
  }

  /**
   * Get orderGrn
   * @return orderGrn
   */
  @javax.annotation.Nullable
  public String getOrderGrn() {
    return orderGrn;
  }

  public void setOrderGrn(String orderGrn) {
    this.orderGrn = orderGrn;
  }


  public RmaReturnResponse status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public RmaReturnResponse products(List<RmaReturnProduct> products) {
    this.products = products;
    return this;
  }

  public RmaReturnResponse addProductsItem(RmaReturnProduct productsItem) {
    if (this.products == null) {
      this.products = new ArrayList<>();
    }
    this.products.add(productsItem);
    return this;
  }

  /**
   * Get products
   * @return products
   */
  @javax.annotation.Nullable
  public List<RmaReturnProduct> getProducts() {
    return products;
  }

  public void setProducts(List<RmaReturnProduct> products) {
    this.products = products;
  }


  public RmaReturnResponse preferredRefundMethod(RmaRefundMethod preferredRefundMethod) {
    this.preferredRefundMethod = preferredRefundMethod;
    return this;
  }

  /**
   * Get preferredRefundMethod
   * @return preferredRefundMethod
   */
  @javax.annotation.Nullable
  public RmaRefundMethod getPreferredRefundMethod() {
    return preferredRefundMethod;
  }

  public void setPreferredRefundMethod(RmaRefundMethod preferredRefundMethod) {
    this.preferredRefundMethod = preferredRefundMethod;
  }


  public RmaReturnResponse refundShippingCost(Boolean refundShippingCost) {
    this.refundShippingCost = refundShippingCost;
    return this;
  }

  /**
   * Get refundShippingCost
   * @return refundShippingCost
   */
  @javax.annotation.Nullable
  public Boolean getRefundShippingCost() {
    return refundShippingCost;
  }

  public void setRefundShippingCost(Boolean refundShippingCost) {
    this.refundShippingCost = refundShippingCost;
  }


  public RmaReturnResponse refundPaymentCost(Boolean refundPaymentCost) {
    this.refundPaymentCost = refundPaymentCost;
    return this;
  }

  /**
   * Get refundPaymentCost
   * @return refundPaymentCost
   */
  @javax.annotation.Nullable
  public Boolean getRefundPaymentCost() {
    return refundPaymentCost;
  }

  public void setRefundPaymentCost(Boolean refundPaymentCost) {
    this.refundPaymentCost = refundPaymentCost;
  }


  public RmaReturnResponse customerInfo(RmaCustomerInfo customerInfo) {
    this.customerInfo = customerInfo;
    return this;
  }

  /**
   * Get customerInfo
   * @return customerInfo
   */
  @javax.annotation.Nullable
  public RmaCustomerInfo getCustomerInfo() {
    return customerInfo;
  }

  public void setCustomerInfo(RmaCustomerInfo customerInfo) {
    this.customerInfo = customerInfo;
  }


  public RmaReturnResponse returnAddress(RmaPostalAddress returnAddress) {
    this.returnAddress = returnAddress;
    return this;
  }

  /**
   * Get returnAddress
   * @return returnAddress
   */
  @javax.annotation.Nullable
  public RmaPostalAddress getReturnAddress() {
    return returnAddress;
  }

  public void setReturnAddress(RmaPostalAddress returnAddress) {
    this.returnAddress = returnAddress;
  }


  public RmaReturnResponse note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Get note
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public RmaReturnResponse history(List<RmaReturnHistory> history) {
    this.history = history;
    return this;
  }

  public RmaReturnResponse addHistoryItem(RmaReturnHistory historyItem) {
    if (this.history == null) {
      this.history = new ArrayList<>();
    }
    this.history.add(historyItem);
    return this;
  }

  /**
   * Get history
   * @return history
   */
  @javax.annotation.Nullable
  public List<RmaReturnHistory> getHistory() {
    return history;
  }

  public void setHistory(List<RmaReturnHistory> history) {
    this.history = history;
  }


  public RmaReturnResponse createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public RmaReturnResponse updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public RmaReturnResponse orderData(RmaOrderData orderData) {
    this.orderData = orderData;
    return this;
  }

  /**
   * Get orderData
   * @return orderData
   */
  @javax.annotation.Nullable
  public RmaOrderData getOrderData() {
    return orderData;
  }

  public void setOrderData(RmaOrderData orderData) {
    this.orderData = orderData;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the RmaReturnResponse instance itself
   */
  public RmaReturnResponse putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RmaReturnResponse rmaReturnResponse = (RmaReturnResponse) o;
    return Objects.equals(this.id, rmaReturnResponse.id) &&
        Objects.equals(this.grn, rmaReturnResponse.grn) &&
        Objects.equals(this.orderGrn, rmaReturnResponse.orderGrn) &&
        Objects.equals(this.status, rmaReturnResponse.status) &&
        Objects.equals(this.products, rmaReturnResponse.products) &&
        Objects.equals(this.preferredRefundMethod, rmaReturnResponse.preferredRefundMethod) &&
        Objects.equals(this.refundShippingCost, rmaReturnResponse.refundShippingCost) &&
        Objects.equals(this.refundPaymentCost, rmaReturnResponse.refundPaymentCost) &&
        Objects.equals(this.customerInfo, rmaReturnResponse.customerInfo) &&
        Objects.equals(this.returnAddress, rmaReturnResponse.returnAddress) &&
        Objects.equals(this.note, rmaReturnResponse.note) &&
        Objects.equals(this.history, rmaReturnResponse.history) &&
        Objects.equals(this.createdAt, rmaReturnResponse.createdAt) &&
        Objects.equals(this.updatedAt, rmaReturnResponse.updatedAt) &&
        Objects.equals(this.orderData, rmaReturnResponse.orderData)&&
        Objects.equals(this.additionalProperties, rmaReturnResponse.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, grn, orderGrn, status, products, preferredRefundMethod, refundShippingCost, refundPaymentCost, customerInfo, returnAddress, note, history, createdAt, updatedAt, orderData, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RmaReturnResponse {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    grn: ").append(toIndentedString(grn)).append("\n");
    sb.append("    orderGrn: ").append(toIndentedString(orderGrn)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    products: ").append(toIndentedString(products)).append("\n");
    sb.append("    preferredRefundMethod: ").append(toIndentedString(preferredRefundMethod)).append("\n");
    sb.append("    refundShippingCost: ").append(toIndentedString(refundShippingCost)).append("\n");
    sb.append("    refundPaymentCost: ").append(toIndentedString(refundPaymentCost)).append("\n");
    sb.append("    customerInfo: ").append(toIndentedString(customerInfo)).append("\n");
    sb.append("    returnAddress: ").append(toIndentedString(returnAddress)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    history: ").append(toIndentedString(history)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    orderData: ").append(toIndentedString(orderData)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("grn");
    openapiFields.add("orderGrn");
    openapiFields.add("status");
    openapiFields.add("products");
    openapiFields.add("preferredRefundMethod");
    openapiFields.add("refundShippingCost");
    openapiFields.add("refundPaymentCost");
    openapiFields.add("customerInfo");
    openapiFields.add("returnAddress");
    openapiFields.add("note");
    openapiFields.add("history");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("orderData");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RmaReturnResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RmaReturnResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RmaReturnResponse is not found in the empty JSON string", RmaReturnResponse.openapiRequiredFields.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("grn") != null && !jsonObj.get("grn").isJsonNull()) && !jsonObj.get("grn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grn").toString()));
      }
      if ((jsonObj.get("orderGrn") != null && !jsonObj.get("orderGrn").isJsonNull()) && !jsonObj.get("orderGrn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orderGrn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orderGrn").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (jsonObj.get("products") != null && !jsonObj.get("products").isJsonNull()) {
        JsonArray jsonArrayproducts = jsonObj.getAsJsonArray("products");
        if (jsonArrayproducts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("products").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `products` to be an array in the JSON string but got `%s`", jsonObj.get("products").toString()));
          }

          // validate the optional field `products` (array)
          for (int i = 0; i < jsonArrayproducts.size(); i++) {
            RmaReturnProduct.validateJsonElement(jsonArrayproducts.get(i));
          };
        }
      }
      // validate the optional field `preferredRefundMethod`
      if (jsonObj.get("preferredRefundMethod") != null && !jsonObj.get("preferredRefundMethod").isJsonNull()) {
        RmaRefundMethod.validateJsonElement(jsonObj.get("preferredRefundMethod"));
      }
      // validate the optional field `customerInfo`
      if (jsonObj.get("customerInfo") != null && !jsonObj.get("customerInfo").isJsonNull()) {
        RmaCustomerInfo.validateJsonElement(jsonObj.get("customerInfo"));
      }
      // validate the optional field `returnAddress`
      if (jsonObj.get("returnAddress") != null && !jsonObj.get("returnAddress").isJsonNull()) {
        RmaPostalAddress.validateJsonElement(jsonObj.get("returnAddress"));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if (jsonObj.get("history") != null && !jsonObj.get("history").isJsonNull()) {
        JsonArray jsonArrayhistory = jsonObj.getAsJsonArray("history");
        if (jsonArrayhistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("history").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `history` to be an array in the JSON string but got `%s`", jsonObj.get("history").toString()));
          }

          // validate the optional field `history` (array)
          for (int i = 0; i < jsonArrayhistory.size(); i++) {
            RmaReturnHistory.validateJsonElement(jsonArrayhistory.get(i));
          };
        }
      }
      // validate the optional field `orderData`
      if (jsonObj.get("orderData") != null && !jsonObj.get("orderData").isJsonNull()) {
        RmaOrderData.validateJsonElement(jsonObj.get("orderData"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RmaReturnResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RmaReturnResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RmaReturnResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RmaReturnResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<RmaReturnResponse>() {
           @Override
           public void write(JsonWriter out, RmaReturnResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additional properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   JsonElement jsonElement = gson.toJsonTree(entry.getValue());
                   if (jsonElement.isJsonArray()) {
                     obj.add(entry.getKey(), jsonElement.getAsJsonArray());
                   } else {
                     obj.add(entry.getKey(), jsonElement.getAsJsonObject());
                   }
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public RmaReturnResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             JsonObject jsonObj = jsonElement.getAsJsonObject();
             // store additional fields in the deserialized instance
             RmaReturnResponse instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RmaReturnResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RmaReturnResponse
   * @throws IOException if the JSON string is invalid with respect to RmaReturnResponse
   */
  public static RmaReturnResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RmaReturnResponse.class);
  }

  /**
   * Convert an instance of RmaReturnResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

